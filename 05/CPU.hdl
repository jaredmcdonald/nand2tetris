// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* `i` bit: A-instruction or C-instruction? */ 
    Mux16(a=instruction, b=aluOut, out=aRegIn, sel=instruction[15]);

    /* `a` bit: A or M register as second input to ALU? */
    Mux16(a=aRegToALU, b=inM, sel=instruction[12], out=aluInY);

    /* we load the A register in the case of an A instruction or when the highest `d` bit is 1 */
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadAReg);
    ARegister(in=aRegIn, load=loadAReg, out=aRegToPC, out[0..14]=addressM, out=aRegToALU);

    /* 2nd `d` bit controls whether to store the ALU output in the D register (also assert c-instruction) */
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=aluOut, load=loadDReg, out=dRegOut);

    /* lowest `d` bit: whether to write to memory (also assert c-instruction) */
    And(a=instruction[15], b=instruction[3], out=writeM);

    /*
      `cccccc` bits: which instruction to execute on the ALU?
      there's a 1:1 correspondence between the inputs and the c bits!,
      cf figures 2.6 and 4.3
    */
    ALU(
    	x=dRegOut,
	zx=instruction[11],
	nx=instruction[10],
	y=aluInY,
	zy=instruction[9],
	ny=instruction[8],
    	f=instruction[7],
	no=instruction[6],
	out=outM,
	out=aluOut,
	zr=aluZr,
	ng=aluNg
    );

    /* `jjj` bits: jump logic */
    Or(a=aluNg, b=aluZr, out=aluLteZero);
    Not(in=aluLteZero, out=gtZero); 
    Not(in=aluNg, out=aluNonNeg);
    Not(in=aluZr, out=aluNonZero);
    Mux8Way16( // AFAIK there's no one-bit version (Mux8Way)
    	a[0]=false,      // 000: no jump
        b[0]=gtZero,     // 001: > 0
	c[0]=aluZr,      // 010: = 0
	d[0]=aluNonNeg,  // 011: >= 0
	e[0]=aluNg,      // 100: < 0
	f[0]=aluNonZero, // 101: != 0
	g[0]=aluLteZero, // 110: <= 0
	h[0]=true,       // 111: unconditional jump
	sel=instruction[0..2],
	out[0]=pcShouldJumpJBits
    );
    And(a=pcShouldJumpJBits, b=instruction[15], out=pcShouldJump); // should only do it on a C-instruction
    Not(in=pcShouldJump, out=pcShouldInc);
    PC(in=aRegToPC, reset=reset, inc=pcShouldInc, load=pcShouldJump, out[0..14]=pc);
}
